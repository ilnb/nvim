local function set_entry(icon, desc, key, dir, select)
  local s = function(selected, opts)
    if selected and #selected > 0 then
      vim.cmd('tcd' .. dir)
      require 'fzf-lua'.actions.file_edit_or_qf(selected, opts)
    end
  end
  return {
    icon = icon,
    key = key,
    desc = desc,
    action = function()
      local opts = { cwd = dir }
      opts.actions = select and { default = s }
      require 'fzf-lua'.files(opts)
    end
  }
end

return {
  {
    'nvim-lualine/lualine.nvim',
    event = 'VeryLazy',

    init = function()
      vim.g.lualine_laststatus = vim.o.laststatus
      if vim.fn.argc(-1) > 0 then
        -- set an empty statusline till lualine loads
        vim.o.statusline = ' '
      else
        -- hide the statusline on the starter page
        vim.o.laststatus = 0
      end
    end,

    opts = function()
      -- PERF: we don't need this lualine require madness ü§∑
      require 'lualine_require'.require = require
      vim.o.laststatus = vim.g.lualine_laststatus

      vim.api.nvim_create_autocmd('ColorScheme', {
        callback = function()
          require 'lualine'.setup {
            options = { theme = require 'utils.plugins'.lualine_theme() },
          }
        end
      })

      local opts = {
        options = {
          theme = require 'utils.plugins'.lualine_theme(),
          globalstatus = vim.o.laststatus == 3,
          disabled_filetypes = { statusline = { 'dashboard', 'alpha', 'ministarter', 'snacks_dashboard' } },
        },

        sections = {
          lualine_a = { 'mode' },
          lualine_b = { 'branch' },

          lualine_c = {
            {
              'diagnostics',
              symbols = {
                error = 'ÔÅó ',
                warn  = 'ÔÅ± ',
                info  = 'ÔÉ´ ',
                hint  = 'ÔÅö ',
              },
            },

            {
              'filetype',
              icon_only = true,
              separator = '',
              padding = { left = 1, right = 0 }
            },

            {
              'filename',
              separator = { right = 'ÓÇ±' }
            },

            {
              function()
                return require 'nvim-navic'.get_location()
              end,
              cond = function()
                local ok, navic = pcall(require, 'nvim-navic')
                return ok and navic.is_available() and vim.o.columns >= 130
              end,
              color = 'dynamic',
            }
          },

          lualine_x = {
            {
              function() return require 'noice'.api.status.command.get() end,
              cond = function() return package.loaded.noice and require 'noice'.api.status.command.has() end,
              color = function() return { fg = Snacks.util.color 'Statement' } end,
            },

            {
              function() return require 'noice'.api.status.mode.get() end,
              cond = function() return package.loaded.noice and require 'noice'.api.status.mode.has() end,
              color = function() return { fg = Snacks.util.color 'Constant' } end,
            },

            {
              function() return 'ÔëØ  ' .. require 'dap'.status() end,
              cond = function() return package.loaded.dap and require 'dap'.status() ~= '' end,
              color = function() return { fg = Snacks.util.color 'Debug' } end,
            },

            {
              require 'lazy.status'.updates,
              cond = require 'lazy.status'.has_updates,
              color = function() return { fg = Snacks.util.color 'Special' } end,
            },

            {
              'diff',
              symbols = {
                added = '+',
                modified = '~',
                removed = '-',
              },

              -- separator = '',
              source = function()
                local gitsigns = vim.b.gitsigns_status_dict
                if gitsigns then
                  return {
                    added = gitsigns.added,
                    modified = gitsigns.changed,
                    removed = gitsigns.removed,
                  }
                end
              end,
            },

            {
              'lsp_status',
              cond = function() return vim.o.columns >= 95 end,
              icon = 'ÔÄì',
              symbols = {
                spinner = { '‚†ã', '‚†ô', '‚†π', '‚†∏', '‚†º', '‚†¥', '‚†¶', '‚†ß', '‚†á', '‚†è' },
                done = '‚úì',
                separator = ' ',
              },
              ignore_lsp = {},
              separator = { left = 'ÓÇ≥' }
            },

            {
              function() return require 'utils.plugins'.os_icon() end
            }
          },

          lualine_y = {
            {
              'progress',
              separator = ' ',
              padding = { left = 1, right = 0 },
            },

            {
              'location',
              padding = { left = 0, right = 1 },
            },
          },

          lualine_z = {
            function()
              return 'Ôê∫ ' .. os.date '%R'
            end,
          },
        },
        extensions = { 'fzf', 'lazy' },
      }

      return opts
    end
  },

  {
    'folke/snacks.nvim',
    priority = 1000,
    lazy = false,
    keys = {
      {
        '<leader>dd',
        function()
          for _, win in ipairs(vim.api.nvim_list_wins()) do
            local buf = vim.api.nvim_win_get_buf(win)
            if vim.bo[buf].ft == 'snacks_dashboard' then
              if vim.api.nvim_buf_is_valid(buf) and vim.api.nvim_buf_is_loaded(buf) then
                vim.api.nvim_buf_delete(buf, { force = true })
              end
              return
            end
          end
          Snacks.dashboard()
        end,
        desc = 'Dashboard',
      },

      { '<leader>n', function() Snacks.picker.notifications() end,  desc = 'Notifications' },
      { '<leader>N', function() Snacks.notifier.show_history() end, desc = 'Notification history' },
    },

    ---@type snacks.Config
    opts = {
      indent = {
        enabled = true,
        scope = { enabled = false },
      },
      input = { enabled = true },
      notifier = { enabled = true },
      scope = { enabled = true },
      scroll = { enabled = true },
      toggle = {
        -- map = require 'utils.plugins'.safe_keymap_set
      },
      words = { enabled = true },

      statuscolumn = {
        left = { 'fold', 'mark' },
        right = { 'sign', 'git' },
        folds = { open = true },
      },

      ---@type snacks.dashboard.Config
      ---@diagnostic disable: missing-fields
      dashboard = {
        sections = {
          {
            header =
            --[[
       ‚¢Ä‚£¥‚°æ‚†É‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†à‚†∫‚†ü‚†õ‚†õ‚†õ‚†õ‚†ª‚¢ø‚£ø‚£ø‚£ø‚£ø‚£∂‚£§‚°Ä
     ‚¢Ä‚£¥‚£ø‚°ø‚†Å‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚£∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑
    ‚£¥‚£ø‚°ø‚°ü‚°º‚¢π‚£∑‚¢≤‚°∂‚£ñ‚£æ‚£∂‚¢Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚¢Ä‚£º‚£ø‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
   ‚£æ‚£ø‚°ü‚£æ‚°∏‚¢†‚°ø‚¢≥‚°ø‚†ç‚£º‚£ø‚¢è‚£ø‚£∑‚¢Ñ‚°Ä‚†Ñ‚¢†‚£æ‚¢ª‚£ø‚£∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
 ‚£°‚£ø‚£ø‚°ü‚°º‚°Å‚†Å‚£∞‚†Ç‚°æ‚†â‚¢®‚£ø‚†É‚£ø‚°ø‚†ç‚£æ‚£ü‚¢§‚£ø‚¢á‚£ø‚¢á‚£ø‚£ø‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£±‚£ø‚£ø‚°ü‚°ê‚£∞‚£ß‚°∑‚£ø‚£¥‚£ß‚£§‚£º‚£Ø‚¢∏‚°ø‚†Å‚£∞‚†ü‚¢Ä‚£º‚†è‚£≤‚†è‚¢∏‚£ø‚°ü‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚°ü‚†Å‚†Ñ‚†ü‚£Å‚†Ñ‚¢°‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£¶‚£º‚¢ü‚¢Ä‚°º‚†É‚°π‚†É‚°Ä‚¢∏‚°ø‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚°ü
‚£ø‚£ø‚†É‚†Ñ‚¢Ä‚£æ‚†ã‚†ì‚¢∞‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚£ø‚£ø‚£æ‚£Ö‚¢î‚£ï‚°á‚°á‚°º‚¢Å‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢£
‚£ø‚°ü‚†Ñ‚†Ñ‚£æ‚£á‚†∑‚£¢‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£≠‚£Ä‚°à‚†ô‚¢ø‚£ø‚£ø‚°á‚°ß‚¢Å‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚¢è‚£æ
‚£ø‚°á‚†Ñ‚£º‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ü‚¢ª‚†á‚†Ñ‚†Ñ‚¢ø‚£ø‚°á‚¢°‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£è‚£º‚£ø
‚£ø‚£∑‚¢∞‚£ø‚£ø‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢∞‚£ß‚£Ä‚°Ñ‚¢Ä‚†ò‚°ø‚£∞‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ü‚£º‚£ø‚£ø
‚¢π‚£ø‚¢∏‚£ø‚£ø‚†ü‚†ª‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚£≠‚£â‚£§‚£ø‚¢à‚£º‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†è‚£æ‚£π‚£ø‚£ø
‚¢∏‚†á‚°ú‚£ø‚°ü‚†Ñ‚†Ñ‚†Ñ‚†à‚†ô‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ü‚£±‚£ª‚£ø‚£ø‚£ø‚£ø‚£ø‚†ü‚†Å‚¢≥‚†É‚£ø‚£ø‚£ø
 ‚£∞‚°ó‚†π‚£ø‚£Ñ‚†Ñ‚†Ñ‚†Ñ‚¢Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ü‚£Ö‚£•‚£ø‚£ø‚£ø‚£ø‚†ø‚†ã  ‚£æ‚°å‚¢†‚£ø‚°ø‚†É
‚†ú‚†ã‚¢†‚£∑‚¢ª‚£ø‚£ø‚£∂‚£æ‚£ø‚£ø‚£ø‚£ø‚†ø‚£õ‚£•‚£æ‚£ø‚†ø‚†ü‚†õ‚†â
]]

            [[
‚£á‚£ø‚†ò‚£ø‚£ø‚£ø‚°ø‚°ø‚£ü‚£ü‚¢ü‚¢ü‚¢ù‚†µ‚°ù‚£ø‚°ø‚¢Ç‚£º‚£ø‚£∑‚£å‚†©‚°´‚°ª‚£ù‚†π‚¢ø‚£ø‚£ø
‚°Ü‚£ø‚£Ü‚†±‚£ù‚°µ‚£ù‚¢Ö‚†ô‚£ø‚¢ï‚¢ï‚¢ï‚¢ï‚¢ù‚£•‚¢í‚†Ö‚£ø‚£ø‚£ø‚°ø‚£≥‚£å‚†™‚°™‚£°‚¢ë‚¢ù‚£á
‚°Ü‚£ø‚£ø‚£¶‚†π‚£≥‚£≥‚£ï‚¢Ö‚†à‚¢ó‚¢ï‚¢ï‚¢ï‚¢ï‚¢ï‚¢à‚¢Ü‚†ü‚†ã‚†â‚†Å‚†â‚†â‚†Å‚†à‚†º‚¢ê‚¢ï‚¢Ω
‚°ó‚¢∞‚£∂‚£∂‚£¶‚£ù‚¢ù‚¢ï‚¢ï‚†Ö‚°Ü‚¢ï‚¢ï‚¢ï‚¢ï‚¢ï‚£¥‚†è‚£†‚°∂‚†õ‚°â‚°â‚°õ‚¢∂‚£¶‚°Ä‚†ê‚£ï‚¢ï
‚°ù‚°Ñ‚¢ª‚¢ü‚£ø‚£ø‚£∑‚£ï‚£ï‚£Ö‚£ø‚£î‚£ï‚£µ‚£µ‚£ø‚£ø‚¢†‚£ø‚¢†‚£Æ‚°à‚£å‚†®‚†Ö‚†π‚£∑‚°Ä‚¢±‚¢ï
‚°ù‚°µ‚†ü‚†à‚¢Ä‚£Ä‚£Ä‚°Ä‚†â‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£º‚£ø‚¢à‚°ã‚†¥‚¢ø‚°ü‚£°‚°á‚£ø‚°á‚°Ä‚¢ï
‚°ù‚†Å‚£†‚£æ‚†ü‚°â‚°â‚°â‚†ª‚£¶‚£ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚†∏‚£ø‚£¶‚£•‚£ø‚°á‚°ø‚£∞‚¢ó‚¢Ñ
‚†Å‚¢∞‚£ø‚°è‚£¥‚£å‚†à‚£å‚†°‚†à‚¢ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£¨‚£â‚£â‚£Å‚£Ñ‚¢ñ‚¢ï‚¢ï‚¢ï
‚°Ä‚¢ª‚£ø‚°á‚¢ô‚†Å‚†¥‚¢ø‚°ü‚£°‚°Ü‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£µ‚£µ‚£ø
‚°ª‚£Ñ‚£ª‚£ø‚£å‚†ò‚¢ø‚£∑‚£•‚£ø‚†á‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†õ‚†ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£∑‚¢Ñ‚†ª‚£ø‚£ü‚†ø‚†¶‚†ç‚†â‚£°‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢∏‚£ø‚£¶‚†ô‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ü
‚°ï‚°ë‚£ë‚£à‚£ª‚¢ó‚¢ü‚¢û‚¢ù‚£ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†∏‚£ø‚†ø‚†É‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†Å‚£†
‚°ù‚°µ‚°à‚¢ü‚¢ï‚¢ï‚¢ï‚¢ï‚£µ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚£∂‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚†ã‚£Ä‚£à‚†ô
‚°ù‚°µ‚°ï‚°Ä‚†ë‚†≥‚†ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚†õ‚¢â‚°†‚°≤‚°´‚°™‚°™‚°£
]]

            --[[
‚£ø‚£ø‚£∑‚°Å‚¢Ü‚†à‚†ï‚¢ï‚¢Ç‚¢ï‚¢Ç‚¢ï‚¢Ç‚¢î‚¢Ç‚¢ï‚¢Ñ‚†Ç‚£Ç‚†Ç‚†Ü‚¢Ç‚¢ï‚¢Ç‚¢ï‚¢Ç‚¢ï‚¢Ç‚¢ï‚¢Ç
‚£ø‚£ø‚£ø‚°∑‚†ä‚°¢‚°π‚£¶‚°ë‚¢Ç‚¢ï‚¢Ç‚¢ï‚¢Ç‚¢ï‚¢Ç‚†ï‚†î‚†å‚†ù‚†õ‚†∂‚†∂‚¢∂‚£¶‚£Ñ‚¢Ç‚¢ï‚¢Ç‚¢ï
‚£ø‚£ø‚†è‚£†‚£æ‚£¶‚°ê‚¢å‚¢ø‚£∑‚£¶‚£Ö‚°ë‚†ï‚†°‚†ê‚¢ø‚†ø‚£õ‚†ü‚†õ‚†õ‚†õ‚†õ‚†°‚¢∑‚°à‚¢Ç‚¢ï‚¢Ç
‚†ü‚£°‚£æ‚£ø‚£ø‚£ø‚£ø‚£¶‚£ë‚†ù‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°µ‚¢Å‚£§‚£∂‚£∂‚£ø‚¢ø‚¢ø‚¢ø‚°ü‚¢ª‚£§‚¢ë‚¢Ç
‚£æ‚£ø‚£ø‚°ø‚¢ü‚£õ‚£ª‚£ø‚£ø‚£ø‚£¶‚£¨‚£ô‚£ª‚£ø‚£ø‚£∑‚£ø‚£ø‚¢ü‚¢ù‚¢ï‚¢ï‚¢ï‚¢ï‚¢Ω‚£ø‚£ø‚£∑‚£î
‚£ø‚£ø‚†µ‚†ö‚†â‚¢Ä‚£Ä‚£Ä‚£à‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ó‚¢ï‚¢ï‚¢ï‚¢ï‚¢ï‚¢ï‚£Ω‚£ø‚£ø‚£ø‚£ø
‚¢∑‚£Ç‚£†‚£¥‚£æ‚°ø‚°ø‚°ª‚°ª‚£ø‚£ø‚£¥‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£µ‚£µ‚£µ‚£∑‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø
‚¢å‚†ª‚£ø‚°ø‚°´‚°™‚°™‚°™‚°™‚£∫‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚†ø‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†É
‚†£‚°Å‚†π‚°™‚°™‚°™‚°™‚£™‚£æ‚£ø‚£ø‚£ø‚£ø‚†ã‚†ê‚¢â‚¢ç‚¢Ñ‚¢å‚†ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†è‚†à
‚°£‚°ò‚¢Ñ‚†ô‚£æ‚£æ‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°Ä‚¢ê‚¢ï‚¢ï‚¢ï‚¢ï‚¢ï‚°ò‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†è‚††‚†à
‚†å‚¢ä‚¢Ç‚¢£‚†π‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚¢ê‚¢ï‚¢ï‚¢ï‚¢ï‚¢ï‚¢Ö‚£ø‚£ø‚£ø‚£ø‚°ø‚¢ã‚¢ú‚††‚†à
‚†Ñ‚†Å‚†ï‚¢ù‚°¢‚†à‚†ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£ï‚£ë‚£ë‚£ë‚£µ‚£ø‚£ø‚£ø‚°ø‚¢ã‚¢î‚¢ï‚£ø‚††‚†à
‚†®‚°Ç‚°Ä‚¢ë‚¢ï‚°Ö‚†Ç‚†Ñ‚†â‚†õ‚†ª‚†ø‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚¢ã‚¢î‚¢ï‚¢ï‚£ø‚£ø‚††‚†à
‚†Ñ‚†™‚£Ç‚†Å‚¢ï‚†Ü‚†Ñ‚†Ç‚†Ñ‚†Å‚°Ä‚†Ç‚°Ä‚†Ñ‚¢à‚†â‚¢ç‚¢õ‚¢õ‚¢õ‚¢ã‚¢î‚¢ï‚¢ï‚¢ï‚£Ω‚£ø‚£ø‚††‚†à
]]

            --[[
‚£ø‚°á‚£ø‚£ø‚£ø‚†õ‚†Å‚£¥‚£ø‚°ø‚†ø‚†ß‚†π‚†ø‚†ò‚£ø‚£ø‚£ø‚°á‚¢∏‚°ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚¢π‚°á‚£ø‚£ø‚£ø‚†Ñ‚£û‚£Ø‚£∑‚£æ‚£ø‚£ø‚£ß‚°π‚°Ü‚°Ä‚†â‚¢π‚°å‚†ê‚¢ø‚£ø‚£ø‚£ø‚°û‚£ø‚£ø‚£ø
‚£æ‚°á‚£ø‚£ø‚°á‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£Ñ‚¢ª‚£¶‚°Ä‚†Å‚¢∏‚°å‚†ª‚£ø‚£ø‚£ø‚°Ω‚£ø‚£ø
‚°á‚£ø‚†π‚£ø‚°á‚°ü‚†õ‚£â‚†Å‚†â‚†â‚†ª‚°ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£¶‚£Ñ‚°â‚†Ç‚†à‚†ô‚¢ø‚£ø‚£ù‚£ø
‚†§‚¢ø‚°Ñ‚†π‚£ß‚£∑‚£∏‚°á‚†Ñ‚†Ñ‚†≤‚¢∞‚£å‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚£§‚£§‚°Ä‚†Ñ‚†à‚†ª‚¢Æ
  ‚£ß‚†Ñ‚¢ò‚¢ª‚£ø‚°á‚¢Ä‚£Ä‚†Ñ‚£∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚°Ä‚†Ñ‚¢Ä
  ‚£ø‚°Ü‚¢∏‚£ø‚£ø‚£ø‚£¨‚£≠‚£¥‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£Ø‚†ù‚†õ‚†õ‚†ô‚¢ø‚°ø‚†É‚†Ñ‚¢∏
  ‚¢ø‚£ø‚°Ä‚£ø‚£ø‚£ø‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£ø‚£ø‚£ø‚£ø‚°æ‚†Å‚¢†‚°á‚¢Ä
  ‚¢∏‚£ø‚°á‚†ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£è‚£´‚£ª‚°ü‚¢Ä‚†Ñ‚£ø‚£∑‚£æ
  ‚¢∏‚£ø‚°á‚†Ñ‚†à‚†ô‚†ø‚£ø‚£ø‚£ø‚£Æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚¢†‚†ä‚¢Ä‚°á‚£ø‚£ø
   ‚£ø‚°á‚¢Ä‚°≤‚†Ñ‚†Ñ‚†à‚†ô‚†ª‚¢ø‚£ø‚£ø‚†ø‚†ø‚†ü‚†õ‚†ã‚†Å‚£∞‚†á ‚¢∏‚£ø‚£ø‚£ø
   ‚£ø‚°á‚¢¨‚°ª‚°á‚°Ñ‚†Ñ‚†Ñ‚†Ñ‚°∞‚¢ñ‚†î‚†â‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚£º‚†è  ‚¢∏‚£ø‚£ø‚£ø
   ‚£ø‚°á‚†Ñ‚†ô‚¢å‚¢∑‚£Ü‚°Ä‚°æ‚°£‚†É‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚£º‚°ü    ‚¢ø‚£ø‚£ø
]]

            --[[
‚°ø‚†ã‚†Ñ‚£Ä‚£Ä‚£§‚£¥‚£∂‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£¶‚£å‚†ª‚£ø‚£ø
‚£¥‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£¶‚†π‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚†π
‚£ø‚£ø‚°ü‚¢π‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°õ‚¢ø‚£ø‚£ø‚£ø‚£Æ‚†õ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°Ü
‚°ü‚¢ª‚°á‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚££‚†Ñ‚°Ä‚¢¨‚£≠‚£ª‚£∑‚°å‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚†É‚£∏‚°Ä‚†à‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚†à‚£Ü‚¢π‚£ø‚£ø‚£ø‚°à‚¢ø‚£ø‚£ø‚£ø‚£ø
‚†Ñ‚¢ª‚°á‚†Ñ‚¢õ‚£õ‚£ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°Ü‚†π‚£ø‚£Ü‚†∏‚£Ü‚†ô‚†õ‚†õ‚†É‚†ò‚£ø‚£ø‚£ø‚£ø
‚†Ñ‚†∏‚£°‚†Ñ‚°à‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚†ü‚†Å‚£†‚£â‚£§‚£¥‚£ø‚£ø‚†ø‚†ø‚†ø‚°á‚¢∏‚£ø‚£ø‚£ø
‚†Ñ‚°Ñ‚¢ø‚£Ü‚†∞‚°ò‚¢ø‚£ø‚†ø‚¢õ‚£â‚£•‚£¥‚£∂‚£ø‚£ø‚£ø‚£ø‚£ª‚†ü‚£â‚£§‚£∂‚£∂‚£æ‚£ø‚°Ñ‚£ø‚°ø‚¢∏
‚†Ñ‚¢∞‚†∏‚£ø‚†Ñ‚¢≥‚£†‚£§‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚£º‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚¢ª‚°á‚¢∏
‚¢∑‚°à‚¢£‚£°‚£∂‚†ø‚†ü‚†õ‚†ì‚£ö‚£ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£á‚¢∏‚†á‚†ò
‚°Ä‚£å‚†Ñ‚†ª‚£ß‚£¥‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†ü‚†õ‚†õ‚†õ‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ü‚†ò‚†Ñ‚†Ñ
‚£∑‚°ò‚£∑‚°Ä‚†ò‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ã‚¢Ä‚£†‚£§‚£∂‚£∂‚£æ‚°Ü‚£ø‚£ø‚£ø‚†ü‚†Å‚†Ñ‚†Ñ‚†Ñ‚†Ñ
‚£ø‚£∑‚°ò‚£ø‚°Ä‚¢ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚†∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚°ø‚†ü‚†â‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚°Ñ‚¢Ä
‚£ø‚£ø‚£∑‚°à‚¢∑‚°Ä‚†ô‚†õ‚†ª‚†ø‚†ø‚†ø‚†ø‚†ø‚†∑‚†æ‚†ø‚†ü‚£õ‚£ã‚£•‚£∂‚£Ñ‚†Ñ‚¢Ä‚£Ñ‚†π‚£¶‚¢π‚£ø
]]

            --[[
‚£æ‚£ø‚°á‚¢∏‚£ø‚£ø‚£ø‚†Ñ‚†à‚£ø‚£ø‚£ø‚£ø‚†à‚£ø‚°á‚¢π‚£ø‚£ø‚£ø‚°á‚°á‚¢∏‚£ø‚£ø‚°á‚£ø‚£ø‚£ø
‚£ø‚£ø‚°á‚¢∏‚£ø‚£ø‚£ø‚°á‚†Ñ‚¢π‚£ø‚£ø‚£ø‚°Ä‚£ø‚£ß‚¢∏‚£ø‚£ø‚£ø‚†Å‚°á‚¢∏‚£ø‚£ø‚†Å‚£ø‚£ø‚£ø
‚£ø‚£ø‚°á‚†∏‚£ø‚£ø‚£ø‚£ø‚°Ñ‚†à‚¢ø‚£ø‚£ø‚°á‚¢∏‚£ø‚°Ä‚£ø‚£ø‚°ø‚†∏‚°á‚£∏‚£ø‚£ø‚†Ñ‚£ø‚£ø‚£ø
‚£ø‚°ø‚†∑‚†Ñ‚†ø‚†ø‚†ø‚†ü‚†ì‚†∞‚†ò‚†ø‚£ø‚£ø‚°à‚£ø‚°á‚¢π‚°ü‚†∞‚†¶‚†Å‚†à‚†â‚†ã‚†Ñ‚†ª‚¢ø‚£ø
‚°ë‚†∂‚°è‚†õ‚†ê‚†ã‚†ì‚†≤‚†∂‚£≠‚£§‚£¥‚£¶‚£≠‚£•‚£Æ‚£æ‚£¨‚£¥‚°Æ‚†ù‚†í‚†Ç‚†Ç‚†ò‚†â‚†ø‚†ñ‚£¨
‚†â‚†Ñ‚°Ä‚†Ñ‚£Ä‚£Ä‚£Ä‚£Ä‚†à‚¢õ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ü‚†Å‚£Ä‚£§‚£§‚£†‚°Ä‚†Ñ‚°Ä‚†à‚†Å
‚††‚£æ‚°Ä‚£æ‚£ø‚£ß‚£º‚£ø‚°ø‚¢†‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚£º‚£ø‚£ß‚£º‚£ø‚£ø‚¢Ä‚£ø‚°á‚†Ñ
‚†Ñ‚†ª‚£∑‚°ò‚¢ø‚£ø‚£ø‚°ø‚¢£‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ú‚¢ø‚£ø‚£ø‚°ø‚¢É‚£æ‚†ü‚¢Å‚†à
‚¢ª‚£∂‚£¨‚£ø‚£∂‚£¨‚£•‚£∂‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£∂‚£∂‚£æ‚£ø‚£∑‚£æ‚£æ‚¢£
‚†à‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£º‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°è‚†ò
‚°ê‚†ò‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ü‚¢†‚¢É
‚£∑‚°Ä‚†à‚†ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚†ø‚†ø‚†ø‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†ã‚¢Ä‚†Ü‚£º
‚£ø‚£∑‚°Ä‚†Ñ‚†à‚†õ‚¢ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£∂‚£∂‚£∂‚£∂‚£∂‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚†ã‚††‚†Ç‚¢Ä‚£æ‚£ø
‚£ø‚£ø‚£ß‚†Ñ‚†Ñ‚¢µ‚¢†‚£à‚†õ‚†ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ü‚¢ã‚°Å‚¢∞‚†è‚†Ñ‚†Ñ‚£º‚£ø‚£ø
‚£ø‚£ø‚£ø‚°Ñ‚¢¢‚†®‚†Ñ‚£Ø‚†Ñ‚†Ñ‚£å‚£â‚†õ‚†ª‚†ü‚†õ‚¢ã‚£â‚£§‚†Ñ‚¢∏‚°á‚£®‚£§‚†Ñ‚¢∏‚£ø‚£ø‚£ø
]]

            --[[
          ‚ñà‚ñà‚ïó      ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ñà‚ïó          Z
      ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ïö‚ïê‚ïê‚ñà‚ñà‚ñà‚ïî‚ïù‚ïö‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ïë      Z
    ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ñà‚ïî‚ïù  ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ñà‚ñà‚ïî‚ñà‚ñà‚ïë   z
  ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë ‚ñà‚ñà‚ñà‚ïî‚ïù    ‚ïö‚ñà‚ñà‚ïî‚ïù  ‚ïö‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë z
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïë    ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë ‚ïö‚ïê‚ïù ‚ñà‚ñà‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù   ‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïù
]]
          },

          {
            icon = 'Û±å£ ',
            title = 'Actions',
            indent = 2,
            padding = 1,
            {
              icon = 'ÔÄÇ ',
              desc = 'Find file',
              key = 'f',
              action = function()
                require 'fzf-lua'.files { fd_opts = '-I -t f -E .git -H' }
              end
            },
            -- { icon = 'ÔÖõ ', desc = 'Grep', key = 'g', action = ':FzfLua live_grep<cr>' },
            { icon = 'Û∞í≤ ', desc = 'Lazy', key = 'l', action = ':Lazy' },
            { icon = 'Ôê¶ ', desc = 'Exit', key = 'q', action = ':q' },
          },

          { icon = 'ÔÖõ ', title = 'Recent Files', section = 'recent_files', indent = 2, padding = 1 },

          {
            icon = 'ÔÅº ',
            title = 'Files',
            indent = 2,
            padding = 1,

            set_entry('Û∞âã ', 'Data Structure', 'd', '~/data structure/', true),
            set_entry('Û∞ô≤ ', 'C++ Codes', 'p', '~/code/cpp', true),
            set_entry('Û∞ô± ', 'C Codes', 'c', '~/code', false),
            set_entry('Óò†', 'Lua Codes', 'L', '~/code/lua/', false),
            -- set_entry('Û∞üì', 'Go Codes', 'g', '~/code/go', true),
            set_entry('Óö©', 'Zig Codes', 'z', '~/code/zig', true),
          },
          { section = 'startup' },
        },

        formats = {
          key = function(item)
            -- return { { '¬∑', hl = 'special' }, { item.key, hl = 'key' }, { '¬∑', hl = 'special' } }
            return { { '‚ü¶', hl = 'special' }, { item.key, hl = 'key' }, { '‚üß', hl = 'special' } }
          end,
        },
      },
    },

    config = function(_, opts)
      local notify = vim.notify
      require 'snacks'.setup(opts)
      if require 'lazy.core.config'.spec.plugins['noice.nvim'] then
        vim.notify = notify
      end
    end,
  },

  {
    'rebelot/kanagawa.nvim',
    priority = 1000,
    lazy = false,
    config = function()
      require 'kanagawa'.setup {
        compile = false,
        undercurl = true, -- enable undercurls
        commentStyle = { italic = true },
        functionStyle = {},
        keywordStyle = { italic = true },
        statementStyle = { bold = true },
        typeStyle = {},
        transparent = true,
        dimInactive = false,   -- dim inactive window `:h hl-NormalNC`
        terminalColors = true, -- define vim.g.terminal_color_{0,17}

        colors = {
          palette = {},
          theme = {
            all = {
              ui = {
                bg_gutter = 'NONE',
                float = { bg_border = 'NONE', },
              },
            },
          },
        },

        ---@type fun(colors: KanagawaColorsSpec): table<string, table>
        overrides = function(colors)
          return {
            NavicText = { fg = colors.palette.fujiWhite },
            Pmenu = { bg = 'NONE' },
            CursorLine = { bg = 'NONE' },
            NormalFloat = { bg = 'NONE' },
            FloatBorder = { bg = 'NONE' },
            MiniFilesCursorLine = { link = 'PmenuSel' },
            MiniFilesTitleFocused = { fg = '#F9E2AF' },
            StatusLine = { bg = 'NONE' },
            TabLineFill = { bg = 'NONE' },
            UfoFoldedBg = { bg = 'NONE' },      -- doesn't work
            UfoPreviewWin = { bg = '#5A6FAF' }, -- same here
          }
        end,

        theme = 'wave',
        background = { dark = 'wave', light = 'wave' },
      }
    end
  },

  {
    'lewis6991/gitsigns.nvim',
    event = { 'BufReadPost' },
    opts = function()
      Snacks.toggle {
        name = 'Git Signs',
        get = function()
          return require 'gitsigns.config'.config.signcolumn
        end,
        set = function(state)
          require 'gitsigns'.toggle_signs(state)
        end,
      }:map '<leader>uG'
      return {
        signs = {
          add = { text = '‚ñé' },
          change = { text = '‚ñé' },
          delete = { text = 'ÔÉö' },
          topdelete = { text = 'ÔÉö' },
          changedelete = { text = '‚ñé' },
          untracked = { text = '‚ñé' },
        },
        signs_staged = {
          add = { text = '‚ñé' },
          change = { text = '‚ñé' },
          delete = { text = 'ÔÉö' },
          topdelete = { text = 'ÔÉö' },
          changedelete = { text = '‚ñé' },
        },
        on_attach = function(buffer)
          local gs = package.loaded.gitsigns

          local function map(mode, l, r, desc)
            vim.keymap.set(mode, l, r, { buffer = buffer, desc = desc })
          end

          map('n', ']h', function()
            if vim.wo.diff then
              vim.cmd.normal { ']c', bang = true }
            else
              gs.nav_hunk 'next'
            end
          end, 'Next Hunk')
          map('n', '[h', function()
            if vim.wo.diff then
              vim.cmd.normal { '[c', bang = true }
            else
              gs.nav_hunk 'prev'
            end
          end, 'Prev Hunk')
          map('n', ']H', function() gs.nav_hunk 'last' end, 'Last Hunk')
          map('n', '[H', function() gs.nav_hunk 'first' end, 'First Hunk')
          map({ 'n', 'v' }, '<leader>ghs', ':Gitsigns stage_hunk<CR>', 'Stage Hunk')
          map({ 'n', 'v' }, '<leader>ghr', ':Gitsigns reset_hunk<CR>', 'Reset Hunk')
          map('n', '<leader>ghS', gs.stage_buffer, 'Stage Buffer')
          map('n', '<leader>ghu', gs.undo_stage_hunk, 'Undo Stage Hunk')
          map('n', '<leader>ghR', gs.reset_buffer, 'Reset Buffer')
          map('n', '<leader>ghp', gs.preview_hunk_inline, 'Preview Hunk Inline')
          map('n', '<leader>ghb', function() gs.blame_line { full = true } end, 'Blame Line')
          map('n', '<leader>ghB', function() gs.blame() end, 'Blame Buffer')
          map('n', '<leader>ghd', gs.diffthis, 'Diff This')
          map('n', '<leader>ghD', function() gs.diffthis '~' end, 'Diff This ~')
          map({ 'o', 'x' }, 'ih', ':<C-U>Gitsigns select_hunk<CR>', 'GitSigns Select Hunk')
        end,
      }
    end,
  },

  {
    'echasnovski/mini.icons',
    lazy = true,
    opts = {
      file = {
        ['.keep'] = { glyph = 'Û∞ä¢', hl = 'MiniIconsGrey' },
        ['devcontainer.json'] = { glyph = 'Ôí∑', hl = 'MiniIconsAzure' },
      },
      filetype = {
        dotenv = { glyph = 'Ó≠í', hl = 'MiniIconsYellow' },
      },
    },
    init = function()
      package.preload['nvim-web-devicons'] = function()
        require 'mini.icons'.mock_nvim_web_devicons()
        return package.loaded['nvim-web-devicons']
      end
    end,
  },

}
